(load "comint")

(defun match-chars-on-line (x)
  (cond ((null x) t)
        ((equal (point) (point-max)) nil)
        ((eq (char-after (point)) (car x))
           (forward-char)
           (match-chars-on-line (cdr x)))
) )

(defun match-doit ()
  (match-chars-on-line '(?\; ?\; ?\; ?\  ?D ?O ?I ?T))
)

(defun epigram-doer (x) (with-current-buffer (car x)
                          (eval-region (cadr x) (cddr x))))

(defun doit-or-not ()
  (let ((buf (current-buffer))
        (marker (point)))
    (while (< (point) (point-max))
      (cond ((match-doit)
               (delete-backward-char 2)
               (insert "NE")
               (beginning-of-line)
               (setq marker (point))
               (backward-sexp)
               (enqueue-eval-event 'epigram-doer
                 (cons buf (cons (point) marker)))
               (goto-char marker)
            )
            (t (forward-line))
      )
    )
    (beginning-of-line)
    (point)
  )
)

;(defun epigram-doiter (buffer marker queue ready)
;  (goto-char (symbol-value marker))
;  (set ready nil)
;  (doit-or-not marker)
;  (set ready t)
;;  (cond ((equal "" (symbol-value queue)))
;;        (t
;;           (insert (symbol-value queue))
;;           (set queue "")
;;           (comint-send-input)))
;)

(defun epigram-key-code (k)
  (cond
    ((symbolp k) (prin1-to-string k))
    ((characterp k) (int-to-string (char-int k)))
    (t "?")
  )
)

(defun epigram-button-details (x)
  (concat
    (int-to-string (event-button x))
    " " (int-to-string (event-x x))
    " " (int-to-string (event-y x))
    " " (prin1-to-string (event-modifiers x))
  )
)

(defun epigram-event (x)
  (cond
    ((key-press-event-p x)
       (concat "key " (epigram-key-code (event-key x))
               " " (prin1-to-string (event-modifiers x))
       )
    )
    ((button-press-event-p x)
       (concat "button down " (epigram-button-details x)
       )
    )
    ((button-release-event-p x)
       (concat "button up " (epigram-button-details x)
       )
    )
    (t "")
  )
)

(defun spaces (i)
  (let ((x ""))
    (while (> i 0)
      (setq x (concat " " x))
      (setq i (- i 1))
    )
    x
  )
)

(defun bung-out (x)
  (cond
     ((stringp x) (insert-face x 'E))
     ((integerp x) (insert-face (spaces x) 'E))
     ((consp x) (insert-face (car x) (cdr x)))
     (t ())
  )
)

(defun bung-out-line (x)
  (mapc 'bung-out x)
  (insert-face "\n" 'E)
)

(defun bols (d x)
  (while (not (null x))
    (cond ((> d 0)
             (setq d (- d 1))
             (kill-line 1))
    )
    (bung-out-line (car x))
    (setq x (cdr x))
  )
  (cond ((> d 0) (kill-line d)))
)

(defun goto-xy (x y)
  (goto-line (+ y 1))
  (beginning-of-line)
  (forward-char x)
  (point)
)

(defun try-to-make-buf-selected (buf)
  (let ((w (get-buffer-window buf t)))
       (set-frame-selected-window (window-frame w) w)
  )
)
