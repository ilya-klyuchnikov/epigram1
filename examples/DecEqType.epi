-------------------------------------------------------------------------------------------------------------------------------------------
data (-----------!  where 
     ! False : * )        
-------------------------------------------------------------------------------------------------------------------------------------------
     (   A : *   !              
let  !-----------!              
     ! not A : * )              
                                
     not A => all a : A => False
-------------------------------------------------------------------------------------------------------------------------------------------
     ( A : * ;  a, b : A !                           
data !-------------------!  where (-----------------!
     !    Eq a b : *     )        ! refl a : Eq a a )
-------------------------------------------------------------------------------------------------------------------------------------------
                                       (  s, t : Type   !
data (----------!  where nat : Type ;  !----------------!
     ! Type : * )                      ! arr s t : Type )
-------------------------------------------------------------------------------------------------------------------------------------------
     (   A : *   !        (     a : A     !    (  f : not A   !
data !-----------!  where !---------------! ;  !--------------!
     ! Dec A : * )        ! yes a : Dec A )    ! no f : Dec A )
-------------------------------------------------------------------------------------------------------------------------------------------
     ( p : Eq nat (arr sigma tau) !
let  !----------------------------!
     !    nEqNatArr p : False     )
                                   
     nEqNatArr p <= case p         
-------------------------------------------------------------------------------------------------------------------------------------------
     ( p : Eq (arr sigma tau) nat !
let  !----------------------------!
     !    nEqArrNat p : False     )
                                   
     nEqArrNat p <= case p         
-------------------------------------------------------------------------------------------------------------------------------------------
     (           sigma, tau : Type           ! 
let  !---------------------------------------! 
     ! eqType sigma tau : Dec (Eq sigma tau) ) 
                                               
     eqType sigma tau <= rec sigma             
     { eqType x tau <= case x                  
       { eqType nat tau <= case tau            
         { eqType nat nat => yes (refl nat)    
           eqType nat (arr s t) => no nEqNatArr
         }                                     
         eqType (arr s t) tau <= case tau      
         { eqType (arr s t) nat <= [no nEqArrNat]
           eqType (arr s t) (arr s' t') []     
         }                                     
       }                                       
     }                                         
-------------------------------------------------------------------------------------------------------------------------------------------
