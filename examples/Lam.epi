--------------------------------------------------------------------------------------------------------
include Nat
--------------------------------------------------------------------------------------------------------
include Vec
--------------------------------------------------------------------------------------------------------
include Fin
--------------------------------------------------------------------------------------------------------
     (  n : Nat  !        (   i : Fin n   !    (  t, u : Lam n   !    ( t : Lam (suc n) !
data !-----------!  where !---------------! ;  !-----------------! ;  !-----------------!
     ! Lam n : * )        ! var i : Lam n )    ! app t u : Lam n )    !  abs t : Lam n  )
--------------------------------------------------------------------------------------------------------
     (      xs : Vec (Fin m) n       !            
let  !-------------------------------!            
     ! weak xs : Vec (Fin (suc m)) n )            
                                                  
     weak xs <= rec xs                            
     { weak xs <= case xs                         
       { weak vnil => vnil                        
         weak (vcons a as) => vcons (fs a) (weak as)
       }                                          
     }                                            
--------------------------------------------------------------------------------------------------------
     ( xs : Vec (Fin m) n ;  t : Lam n !                  
let  !---------------------------------!                  
     !        ren xs t : Lam m         )                  
                                                          
     ren xs t <= rec t                                    
     { ren xs x <= case x                                 
       { ren xs (var i) => var (vlookup xs i)              
         ren xs (app t u) => app (ren xs t) (ren xs u)    
         ren xs (abs t) => abs (ren (vcons fz (weak xs)) t)
       }                                                  
     }                                                    
--------------------------------------------------------------------------------------------------------
     (          n : Nat           !              
let  !----------------------------!              
     ! wk n : Vec (Fin (suc n)) n )              
                                                 
     wk n <= rec n                               
     { wk x <= case x                            
       { wk zero => vnil                         
         wk (suc n) => vcons (fs fz) (weak (wk n))
       }                                         
     }                                           
--------------------------------------------------------------------------------------------------------
     ( xs : Vec (Lam m) n ;  t : Lam n !                                        
let  !---------------------------------!                                        
     !       subst xs t : Lam m        )                                        
                                                                                
     subst xs t <= rec t                                                        
     { subst xs x <= case x                                                     
       { subst xs (var i) => (vlookup xs i)                                      
         subst xs (app t u) => app (subst xs t) (subst xs u)                    
         subst xs (abs t) => abs (subst (vcons (var fz) (vmap (ren (wk ?)) xs)) t)
       }                                                                        
     }                                                                          
--------------------------------------------------------------------------------------------------------
