------------------------------------------------------------------------------------------------------------
include Eq
------------------------------------------------------------------------------------------------------------
include Color
------------------------------------------------------------------------------------------------------------
include List
------------------------------------------------------------------------------------------------------------
     ( P : all a : A => * ;  as : List A !                                    (    p : P a ;  ps : ListAll P as    !
data !-----------------------------------!  where (----------------------! ;  !------------------------------------!
     !         ListAll P as : *          )        ! lnil : ListAll P nil )    ! lcons p ps : ListAll P (cons a as) )
------------------------------------------------------------------------------------------------------------
     ( as, asbs : List A  !                                    ( as, asbs : List A ;  p : Prefix as asbs ;  a : A !
data !--------------------!  where (----------------------! ;  !--------------------------------------------------!
     ! Prefix as asbs : * )        ! pnil : Prefix nil bs )    !   pcons p a : Prefix (cons a as) (cons a asbs)   )
------------------------------------------------------------------------------------------------------------
     ( as : List A ;  P : all a : A => * !        ( as : List A ;  p : Prefix as asbs ;  q : ListAll P as !
data !-----------------------------------!  where !-------------------------------------------------------!
     !        Takewhile as P : *         )        !             tw as p q : Takewhile asbs P              )
------------------------------------------------------------------------------------------------------------
     ( as : List A ;  d : Dec (P a) ;  r : Takewhile as P !                   
let  !----------------------------------------------------!                   
     !   takewhileaux as d r : Takewhile (cons a as) P    )                   
                                                                              
     takewhileaux as d r <= case r                                            
     { takewhileaux asbs d (tw as p q) <= case d                              
       { takewhileaux asbs (yes a) (tw as p q) => tw ? (pcons p ?) (lcons a q)
         takewhileaux asbs (no f) (tw as p q) => tw nil pnil lnil             
       }                                                                      
     }                                                                        
------------------------------------------------------------------------------------------------------------
     ( eq : all a : A => Dec (P a) ;  as : List A !                          
let  !--------------------------------------------!                          
     !      takewhile eq as : Takewhile as P      )                          
                                                                             
     takewhile eq as <= rec as                                               
     { takewhile eq x <= case x                                              
       { takewhile eq nil => tw nil pnil lnil                                
         takewhile eq (cons a as) => takewhileaux as (eq a) (takewhile eq as)
       }                                                                     
     }                                                                       
------------------------------------------------------------------------------------------------------------
