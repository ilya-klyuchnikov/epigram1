------------------------------------------------------------------------------
     ( A : * ;  a, b : A !                           
data !-------------------!  where (-----------------!
     !    Eq a b : *     )        ! refl a : Eq a a )
------------------------------------------------------------------------------
data (-----------!  where 
     ! False : * )        
------------------------------------------------------------------------------
     (   A : *   !              
let  !-----------!              
     ! not A : * )              
                                
     not A => all a : A => False
------------------------------------------------------------------------------
     (   p : Eq a b   !      
let  !----------------!      
     ! sym p : Eq b a )      
                             
     sym p <= case p         
     { sym (refl a) => refl a
     }                       
------------------------------------------------------------------------------
     ( p : Eq a b ;  q : Eq b c !
let  !--------------------------!
     !    trans p q : Eq a c    )
                                 
     trans p q <= case p         
     { trans (refl a) q => q     
     }                           
------------------------------------------------------------------------------
     ( f : all a : A => B ;  p : Eq a b !
let  !----------------------------------!
     !    resp f p : Eq (f a) (f b)     )
                                         
     resp f p <= case p                  
     { resp f (refl a) => refl (f a)     
     }                                   
------------------------------------------------------------------------------

     ( f : all a : A => all b : B => C ;  p : Eq a a' ;  q : Eq b b' !
let  !---------------------------------------------------------------!
     !              resp2 f p q : Eq (f a b) (f a' b')               )
                                                                      
     resp2 f p q <= case p                                            
     { resp2 f (refl a) q <= case q                                   
       { resp2 f (refl a') (refl a) => refl (f a' a)                  
       }                                                              
     }                                                                
------------------------------------------------------------------------------
