------------------------------------------------------------------------------
include EqNat
------------------------------------------------------------------------------
include List
------------------------------------------------------------------------------
include So
------------------------------------------------------------------------------
     ( eq : all a : A => all b : A => Bool ;  xs : List A !           
data !----------------------------------------------------!           
     !                UniqList A eq xs : *                )           
                                                                      
where (---------------------------!                                   
      ! empty : UniqList A eq nil )                                   
                                                                      
      ( x : A ;  s : UniqList A eq xs ;  p : So (not (elem x xs eq)) !
      !--------------------------------------------------------------!
      !           insert x s p : UniqList A eq (cons x xs)           )
------------------------------------------------------------------------------
     ( ss : UniqList A eq xs ;  f : all a : A => all b : B => B ;  acc : B !
let  !---------------------------------------------------------------------!
     !                         ulfold ss f acc : B                         )
                                                                            
     ulfold ss f acc <= rec ss                                              
     { ulfold x f acc <= case x                                             
       { ulfold empty f acc => acc                                          
         ulfold (insert x s p) f acc => f x (ulfold s f acc)                
       }                                                                    
     }                                                                      
------------------------------------------------------------------------------

