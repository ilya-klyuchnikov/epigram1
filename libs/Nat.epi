------------------------------------------------------------------------------
                                          (   n : Nat   !
data (---------!  where (------------! ;  !-------------!
     ! Nat : * )        ! zero : Nat )    ! suc n : Nat )
------------------------------------------------------------------------------
     (   x, y : Nat   !                  
let  !----------------!                  
     ! plus x y : Nat )                  
                                         
     plus x y <= rec x                   
     { plus x y <= case x                
       { plus zero y => y                
         plus (suc n) y => suc (plus n y)
       }                                 
     }                                   
------------------------------------------------------------------------------
